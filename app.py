{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8a66f40b-1330-4fd3-a54d-75b0589823c5",
   "metadata": {},
   "source": [
    "# API"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4a122e32-3abb-4086-9323-d23eab8b7c4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# API\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import pickle, os, csv, re\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
    "from keras.models import load_model\n",
    "\n",
    "\n",
    "\n",
    "# Library for Flask\n",
    "from flask import Flask, jsonify, request\n",
    "from flasgger import Swagger, LazyString, LazyJSONEncoder\n",
    "from flasgger import swag_from\n",
    "\n",
    "# Swagger UI\n",
    "app = Flask(__name__)\n",
    "app.json_encoder = LazyJSONEncoder\n",
    "swagger_template = dict(\n",
    "    info =  {\n",
    "        'title' : LazyString(lambda: 'API Documentation for Deep Learning API'),\n",
    "        'version' : LazyString(lambda: '1.0.0'),\n",
    "        'description' : LazyString(lambda: 'Dokumentasi API untuk Deep Learning API')\n",
    "    },\n",
    "    host = LazyString(lambda: request.host)\n",
    ")\n",
    "\n",
    "swagger_config =    {\n",
    "    'headers' : [],\n",
    "    'specs':    [\n",
    "        {\n",
    "            'endpoint' : 'docs',\n",
    "            'route' : '/docs.json'\n",
    "        }\n",
    "    ],\n",
    "    'static_url_path' : '/flassger_static',\n",
    "    'swagger_ui' : True,\n",
    "    'specs_route' : '/docs/'\n",
    "}\n",
    "\n",
    "swagger = Swagger(app, template = swagger_template, \n",
    "                  config = swagger_config)\n",
    "\n",
    "# Def Parameter for Feature Extraction, Label for Sentiment, Function for Cleansing\n",
    "max_features = 100000\n",
    "tokenizer = Tokenizer(num_words=max_features, split=' ', lower=True)\n",
    "sentiment = ['negatif', 'netral', 'positif']\n",
    "def cleansing(sent):\n",
    "    \n",
    "    string = sent.lower()\n",
    "    \n",
    "    string = re.sub(r'[^a-zA-Z0-9]', ' ', string)\n",
    "    return string\n",
    "\n",
    "# Load Pickle and Model - Neural Network\n",
    "file = open(\"resources_of_nn/feature.p\",'rb')\n",
    "tfidf_vec = pickle.load(file)\n",
    "file.close()\n",
    "\n",
    "model_file_from_nn = pickle.load(open('model_of_nn/model.p', 'rb'))\n",
    "\n",
    "# Load Pickle and Model - LSTM\n",
    "file = open(\"resources_of_lstm/x_pad_sequences.pickel\",'rb')\n",
    "feature_file_from_lstm = pickle.load(file)\n",
    "file.close()\n",
    "\n",
    "model_file_from_lstm = load_model('model_of_lstm/model.h5')\n",
    "\n",
    "# SetUp Endpoints\n",
    "## Neural Network - Text\n",
    "@swag_from('Platinum_Challenge/Docs/NN_text.yml', methods= ['POST'])\n",
    "@app.route('/NN_text', methods = ['POST'])\n",
    "def NN_text():\n",
    "    # Get Text\n",
    "    original_text = request.form.get('text')\n",
    "    \n",
    "    # Cleansing\n",
    "    text = [cleansing(original_text)]\n",
    "    print(text)\n",
    "    \n",
    "    # Feature Extraction\n",
    "    feature = tokenizer.texts_to_sequences(text)\n",
    "    print(\"tokenizer\", feature)\n",
    "    feature = pad_sequences(feature, maxlen=feature_file_from_nn.shape[1])\n",
    "    print(\"pad seq\", feature)\n",
    "    \n",
    "    # Inference\n",
    "    prediction = model_file_from_nn.predict(feature)\n",
    "    get_sentiment = sentiment[np.argmax(prediction[0])]\n",
    "    print(np.argmax(prediction[0]))\n",
    "    print(prediction)\n",
    "    \n",
    "    # Define API Response\n",
    "    json_response = {\n",
    "        'status_code': 200,\n",
    "        'description': 'Results of NN model',\n",
    "        'data': {\n",
    "            'text': original_text,\n",
    "            'sentiment': get_sentiment\n",
    "        }\n",
    "    }\n",
    "    response_data = jsonify(json_response)\n",
    "    return response_data\n",
    "\n",
    "## Neural Network - File(csv)\n",
    "@swag_from('Platinum_Challenge/Docs/NN_file.yml', methods= ['POST'])\n",
    "@app.route('/NN_file', methods = ['POST'])\n",
    "def NN_file():\n",
    "\n",
    "    # Upladed file\n",
    "    file = request.files.getlist('file')[0]\n",
    "\n",
    "    # Import file csv ke Pandas\n",
    "    df = pd.read_csv(file, encoding='latin-1')\n",
    "\n",
    "    # Get text from file in \"List\" format\n",
    "    texts = df.Tweet.to_list()\n",
    "\n",
    "    # Loop list or original text and predict to model\n",
    "    text_with_sentiment = []\n",
    "    for original_text in texts:\n",
    "\n",
    "        # Cleansing\n",
    "        text = cleansing(original_text)\n",
    "        # Feature extraction\n",
    "        text_feature = tfidf_vec.transform([text])\n",
    "        # Inference\n",
    "        get_sentiment = model_file_from_nn.predict(text_feature)[0]\n",
    "\n",
    "        # Predict \"text_clean\" to the Model. And insert to list \"text_with_sentiment\".\n",
    "        text_with_sentiment.append({\n",
    "            'text': original_text,\n",
    "            'sentiment': get_sentiment\n",
    "        })\n",
    "    \n",
    "    # Define API response\n",
    "    json_response = {\n",
    "        'status_code': 200,\n",
    "        'description': \"Teks yang sudah diproses\",\n",
    "        'data': text_with_sentiment,\n",
    "    }\n",
    "    response_data = jsonify(json_response)\n",
    "    return response_data\n",
    "\n",
    "## LSTM - Text\n",
    "@swag_from('Platinum_Challenge/Docs/LSTM_text.yml', methods= ['POST'])\n",
    "@app.route('/LSTM_text', methods = ['POST'])\n",
    "def LSTM_text():\n",
    "        # Get Text\n",
    "    original_text = request.form.get('text')\n",
    "    \n",
    "    # Cleansing\n",
    "    text = [cleansing(original_text)]\n",
    "    print(text)\n",
    "    \n",
    "    # Feature Extraction\n",
    "    feature = tokenizer.texts_to_sequences(text)\n",
    "    print(\"tokenizer\", feature)\n",
    "    feature = pad_sequences(feature, maxlen=feature_file_from_lstm.shape[1])\n",
    "    print(\"pad seq\", feature)\n",
    "    \n",
    "    # Inference\n",
    "    prediction = model_file_from_lstm.predict(feature)\n",
    "    get_sentiment = sentiment[np.argmax(prediction[0])]\n",
    "    print(np.argmax(prediction[0]))\n",
    "    print(prediction)\n",
    "    \n",
    "    # Define API Response\n",
    "    json_response = {\n",
    "        'status_code': 200,\n",
    "        'description': 'Results of LSTM model',\n",
    "        'data': {\n",
    "            'text': original_text,\n",
    "            'sentiment': get_sentiment\n",
    "        }\n",
    "    }\n",
    "    response_data = jsonify(json_response)\n",
    "    return response_data\n",
    "\n",
    "    \n",
    "## LSTM - File(csv)\n",
    "@swag_from('Platinum_Challenge/Docs/LSTM_file.yml', methods= ['POST'])\n",
    "@app.route('/LSTM_file', methods = ['POST'])\n",
    "def LSTM_file():\n",
    "\n",
    "    # Upladed file\n",
    "    file = request.files.getlist('file')[0]\n",
    "\n",
    "    # Import file csv ke Pandas\n",
    "    df = pd.read_csv(file, encoding='latin-1')\n",
    "\n",
    "    # Get text from file in \"List\" format\n",
    "    texts = df.Tweet.to_list()\n",
    "\n",
    "    # Loop list or original text and predict to model\n",
    "    text_with_sentiment = []\n",
    "    for original_text in texts:\n",
    "\n",
    "        # Cleansing\n",
    "        text = [cleansing(original_text)]\n",
    "        # Feature extraction\n",
    "        feature = tokenizer.texts_to_sequences(text)\n",
    "        feature = pad_sequences(feature, maxlen=feature_file_from_lstm.shape[1])\n",
    "        # Inference\n",
    "        prediction = model_file_from_lstm.predict(feature)\n",
    "        get_sentiment = sentiment[np.argmax(prediction[0])]\n",
    "\n",
    "        # Predict \"text_clean\" to the Model. And insert to list \"text_with_sentiment\".\n",
    "        text_with_sentiment.append({\n",
    "            'text': original_text,\n",
    "            'sentiment': get_sentiment\n",
    "        })\n",
    "    \n",
    "    # Define API response\n",
    "    json_response = {\n",
    "        'status_code': 200,\n",
    "        'description': \"Teks yang sudah diproses\",\n",
    "        'data': text_with_sentiment,\n",
    "    }\n",
    "    response_data = jsonify(json_response)\n",
    "    return response_data\n",
    "    \n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9273301e-7afe-468e-935a-22dac0c27cbe",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "myenv_3",
   "language": "python",
   "name": "myenv_3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
